// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI test: pg can connect through ssh 1`] = `
"table   rows bytes
table_2 0    49.2 kB
table_1 0    41 kB
table_3 0    8.19 kB

(98.3 kB in 3 tables)
"
`;

exports[`CLI test: pg can connect through ssh 2`] = `
"column     type                     nullable default                             foreign key
id         integer                  false    nextval('table_1_id_seq'::regclass)
field_1    integer                  true
field_2    character varying(50)    true
created_at timestamp with time zone true
updated_at timestamp with time zone true

index                 algorithm unique columns
table_1_pkey          btree     true   id
table_1_field_1_index btree     false  field_1
"
`;

exports[`CLI test: pg can connect with an alias 1`] = `
"table   rows bytes
table_2 0    49.2 kB
table_1 0    41 kB
table_3 0    8.19 kB

(98.3 kB in 3 tables)
"
`;

exports[`CLI test: pg can diff tables 1`] = `
"column  type                             nullable     default                                      foreign key
id      integer → character varying(255) false        nextval('table_1_id_seq'::regclass) → [null]
field_1 integer → numeric(8,2)           true → false
field_2 character varying(50) → text     true         [null] → default text

index                       algorithm unique columns
table_1_pkey → table_2_pkey btree     true   id
table_1_field_1_index       btree     false  field_1
table_2_field_1_unique      btree     true   field_1

Columns: 3x changed, 2x similar (hidden)
Indexes: 1x deleted, 1x created, 1x changed
Re-run with --all to show hidden rows
"
`;

exports[`CLI test: pg can diff tables data 1`] = `
"Diff of tables content (rows 1 to 20):

id field_1    updated_at
1  12 → 12.30 [null] → 2020-07-24T18:34:00.000Z
2  30 → 30.45 2020-07-24T18:34:00.000Z → 2020-07-24T19:25:00.000Z

Rows: 2x changed
"
`;

exports[`CLI test: pg can list tables 1`] = `
"table   rows bytes
table_2 0    49.2 kB
table_1 0    41 kB
table_3 0    8.19 kB

(98.3 kB in 3 tables)
"
`;

exports[`CLI test: pg can load dump to database 1`] = `
"column     type                     nullable default                             foreign key
id         integer                  false    nextval('table_1_id_seq'::regclass)
field_1    integer                  true
field_2    character varying(50)    true
created_at timestamp with time zone true
updated_at timestamp with time zone true

index                 algorithm unique columns
table_1_pkey          btree     true   id
table_1_field_1_index btree     false  field_1
"
`;

exports[`CLI test: pg can load dump to database 2`] = `
"column     type                     nullable default      foreign key
id         character varying(255)   false
field_1    numeric(8,2)             false
field_2    text                     true     default text
created_at timestamp with time zone true
updated_at timestamp with time zone true

index                  algorithm unique columns
table_2_pkey           btree     true   id
table_2_field_1_unique btree     true   field_1
"
`;

exports[`CLI test: pg can load dump to database 3`] = `
"column     type                     nullable default           foreign key
field_1    bigint                   false
field_2    character varying(255)   false
field_3    integer                  true                       table_1.id
created_at timestamp with time zone false    CURRENT_TIMESTAMP
updated_at timestamp with time zone false    CURRENT_TIMESTAMP

index        algorithm unique columns
table_3_pkey btree     true   field_1,field_2
"
`;

exports[`CLI test: pg can see dumpfile contents 1`] = `
"table                   rows bytes
migrations_dump_pg      3    4.1 kB
migrations_dump_pg_lock 1    4.1 kB
table_1                 2    4.1 kB
table_2                 2    4.1 kB
table_3                 0    4.1 kB

(20.5 kB in 5 tables)
"
`;

exports[`CLI test: pg can see dumpfile contents 2`] = `
"column     type        nullable default foreign key
id         integer     false
field_1    integer     true
field_2    varchar(50) true
created_at datetime    true
updated_at datetime    true

index                 algorithm unique columns
table_1_field_1_index unknown   false  field_1
"
`;

exports[`CLI test: pg can show table 1`] = `
"column     type                     nullable default      foreign key
id         character varying(255)   false
field_1    numeric(8,2)             false
field_2    text                     true     default text
created_at timestamp with time zone true
updated_at timestamp with time zone true

index                  algorithm unique columns
table_2_pkey           btree     true   id
table_2_field_1_unique btree     true   field_1
"
`;

exports[`CLI test: pg database dump contents are valid 1`] = `
"module.exports.up = async (knex) => {
  await knex.schema.createTable(\\"table_1\\", (t) => {
    t.increments(\\"id\\");
    t.integer(\\"field_1\\");
    t.string(\\"field_2\\", 50);
    t.timestamp(\\"created_at\\").nullable();
    t.timestamp(\\"updated_at\\").nullable();
    t.index([\\"field_1\\"], \\"table_1_field_1_index\\");
  });
};
module.exports.down = async (knex) => {
  await knex.schema.dropTableIfExists(\\"table_1\\");
};
"
`;

exports[`CLI test: pg database dump contents are valid 2`] = `
"module.exports.up = async (knex) => {
  await knex.schema.createTable(\\"table_2\\", (t) => {
    t.string(\\"id\\", 255).primary();
    t.decimal(\\"field_1\\", 8, 2).notNullable();
    t.text(\\"field_2\\").defaultTo(\\"default text\\");
    t.timestamp(\\"created_at\\").nullable();
    t.timestamp(\\"updated_at\\").nullable();
    t.unique([\\"field_1\\"], \\"table_2_field_1_unique\\");
  });
};
module.exports.down = async (knex) => {
  await knex.schema.dropTableIfExists(\\"table_2\\");
};
"
`;

exports[`CLI test: pg database dump contents are valid 3`] = `
"module.exports.up = async (knex) => {
  await knex.schema.createTable(\\"table_3\\", (t) => {
    t.bigInteger(\\"field_1\\").notNullable();
    t.string(\\"field_2\\", 255).notNullable();
    t.integer(\\"field_3\\").references(\\"table_1.id\\");
    t.timestamp(\\"created_at\\").notNullable().defaultTo(knex.raw(\\"CURRENT_TIMESTAMP\\"));
    t.timestamp(\\"updated_at\\").notNullable().defaultTo(knex.raw(\\"CURRENT_TIMESTAMP\\"));
    t.primary([\\"field_1\\",\\"field_2\\"]);
  });
};
module.exports.down = async (knex) => {
  await knex.schema.dropTableIfExists(\\"table_3\\");
};
"
`;

exports[`CLI test: pg database dump contents are valid 4`] = `
"{\\"id\\":1,\\"field_1\\":12,\\"field_2\\":\\"foo\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\"}
{\\"id\\":2,\\"field_1\\":30,\\"field_2\\":\\"bar\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\",\\"updated_at\\":\\"2020-07-24T18:34:00.000Z\\"}
"
`;

exports[`CLI test: pg database dump contents are valid 5`] = `
"{\\"id\\":\\"1\\",\\"field_1\\":\\"12.30\\",\\"field_2\\":\\"foo\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\",\\"updated_at\\":\\"2020-07-24T18:34:00.000Z\\"}
{\\"id\\":\\"2\\",\\"field_1\\":\\"30.45\\",\\"field_2\\":\\"bar\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\",\\"updated_at\\":\\"2020-07-24T19:25:00.000Z\\"}
"
`;
