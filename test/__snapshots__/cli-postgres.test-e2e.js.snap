// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CLI test: pg can create conn aliases 1`] = `
"alias  conn
alias1 mysql://app:secret@127.0.0.1:1234/dbname
alias2 sqlite3:///path/to/file.db
"
`;

exports[`CLI test: pg can delete conn aliases 1`] = `
"alias  conn
alias2 sqlite3:///path/to/file.db
"
`;

exports[`CLI test: pg can diff schemas 1`] = `
"No tables with changes: 3x similar (hidden)
"
`;

exports[`CLI test: pg can diff tables 1`] = `
"column  type              nullable     default
id      integer           false        nextval('table_1_id_seq'::regclass) → nextval('table_2_id_seq'::regclass)
field_1 integer → numeric true → false
field_2 text              true         [null] → 'default text'::text

index                       algorithm unique columns
table_1_pkey → table_2_pkey btree     true   id
table_1_field_1_index       btree     false  field_1
table_2_field_1_unique      btree     true   field_1

Columns: 3x changed, 2x similar (hidden)
Indexes: 1x deleted, 1x created, 1x changed
Re-run with --all to show hidden rows
"
`;

exports[`CLI test: pg can diff tables data 1`] = `
"Diff of tables content (first 20 rows):

id field_1    updated_at
1  12 → 12.30 [null] → 2020-07-24T18:34:00.000Z
2  30 → 30.45 2020-07-24T18:34:00.000Z → 2020-07-24T19:25:00.000Z
Re-run with --all to show rows without changes
"
`;

exports[`CLI test: pg can list tables 1`] = `
"table   rows bytes
table_1 0
table_2 0
table_3 0

(0 B in 3 tables)
"
`;

exports[`CLI test: pg can load database dump 1`] = `
"column     type                     nullable default
id         integer                  false    nextval('table_1_id_seq'::regclass)
field_1    integer                  true
field_2    text                     true
created_at timestamp with time zone true
updated_at timestamp with time zone true

index                 algorithm unique columns
table_1_pkey          btree     true   id
table_1_field_1_index btree     false  field_1
"
`;

exports[`CLI test: pg can load database dump 2`] = `
"column     type                     nullable default
id         integer                  false    nextval('table_2_id_seq'::regclass)
field_1    numeric                  false
field_2    text                     true     'default text::text'::text
created_at timestamp with time zone true
updated_at timestamp with time zone true

index                  algorithm unique columns
table_2_pkey           btree     true   id
table_2_field_1_unique btree     true   field_1
"
`;

exports[`CLI test: pg can load database dump 3`] = `
"column     type                     nullable default
id_field   bigint                   false    nextval('table_3_id_field_seq'::regclass)
field_1    bigint                   true
created_at timestamp with time zone true
updated_at timestamp with time zone true

index        algorithm unique columns
table_3_pkey btree     true   id_field
"
`;

exports[`CLI test: pg can show table 1`] = `
"column     type                     nullable default
id         integer                  false    nextval('table_2_id_seq'::regclass)
field_1    numeric                  false
field_2    text                     true     'default text'::text
created_at timestamp with time zone true
updated_at timestamp with time zone true

index                  algorithm unique columns
table_2_pkey           btree     true   id
table_2_field_1_unique btree     true   field_1
"
`;

exports[`CLI test: pg can use a created alias 1`] = `
"table   rows bytes
table_1 0
table_2 0
table_3 0

(0 B in 3 tables)
"
`;

exports[`CLI test: pg database dump contents are valid 1`] = `
"module.exports.up = async (knex) => {
  await knex.schema.createTable(\\"table_1\\", (t) => {
    t.increments(\\"id\\").defaultTo(\\"nextvaltable_1_id_seq::regclass\\");
    t.integer(\\"field_1\\");
    t.text(\\"field_2\\");
    t.timestamp(\\"created_at\\");
    t.timestamp(\\"updated_at\\");
    t.index([\\"field_1\\"], \\"table_1_field_1_index\\");
  });
};
module.exports.down = async (knex) => {
  await knex.schema.dropTableIfExists(\\"table_1\\");
};
"
`;

exports[`CLI test: pg database dump contents are valid 2`] = `
"module.exports.up = async (knex) => {
  await knex.schema.createTable(\\"table_2\\", (t) => {
    t.increments(\\"id\\").defaultTo(\\"nextvaltable_2_id_seq::regclass\\");
    t.decimal(\\"field_1\\").notNullable();
    t.text(\\"field_2\\").defaultTo(\\"default text::text\\");
    t.timestamp(\\"created_at\\");
    t.timestamp(\\"updated_at\\");
    t.unique([\\"field_1\\"], \\"table_2_field_1_unique\\");
  });
};
module.exports.down = async (knex) => {
  await knex.schema.dropTableIfExists(\\"table_2\\");
};
"
`;

exports[`CLI test: pg database dump contents are valid 3`] = `
"module.exports.up = async (knex) => {
  await knex.schema.createTable(\\"table_3\\", (t) => {
    t.bigIncrements(\\"id_field\\").defaultTo(
      \\"nextvaltable_3_id_field_seq::regclass\\"
    );
    t.bigInteger(\\"field_1\\");
    t.timestamp(\\"created_at\\");
    t.timestamp(\\"updated_at\\");
  });
};
module.exports.down = async (knex) => {
  await knex.schema.dropTableIfExists(\\"table_3\\");
};
"
`;

exports[`CLI test: pg database dump contents are valid 4`] = `
"{\\"id\\":1,\\"field_1\\":12,\\"field_2\\":\\"foo\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\"}
{\\"id\\":2,\\"field_1\\":30,\\"field_2\\":\\"bar\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\",\\"updated_at\\":\\"2020-07-24T18:34:00.000Z\\"}
"
`;

exports[`CLI test: pg database dump contents are valid 5`] = `
"{\\"id\\":1,\\"field_1\\":\\"12.30\\",\\"field_2\\":\\"foo\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\",\\"updated_at\\":\\"2020-07-24T18:34:00.000Z\\"}
{\\"id\\":2,\\"field_1\\":\\"30.45\\",\\"field_2\\":\\"bar\\",\\"created_at\\":\\"2020-07-24T18:34:00.000Z\\",\\"updated_at\\":\\"2020-07-24T19:25:00.000Z\\"}
"
`;
